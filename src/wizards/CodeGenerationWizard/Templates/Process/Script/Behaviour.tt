<# /* The MIT License (MIT) */ #>
<# /* Copyright (c) 1994-2016 The Sage Group plc or its licensors.  All rights reserved. */ #>
<# /* */ #>
<# /* Permission is hereby granted, free of charge, to any person obtaining a copy of */ #>
<# /* this software and associated documentation files (the "Software"), to deal in */ #>
<# /* the Software without restriction, including without limitation the rights to use, */ #>
<# /* copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the */ #>
<# /* Software, and to permit persons to whom the Software is furnished to do so, */ #>
<# /* subject to the following conditions: */ #>
<# /* */ #>
<# /* The above copyright notice and this permission notice shall be included in all */ #>
<# /* copies or substantial portions of the Software. */ #>
<# /* */ #>
<# /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, */ #>
<# /* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A */ #>
<# /* PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT */ #>
<# /* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF */ #>
<# /* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE */ #>
<# /* OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */ #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.BusinessView" name="view" #>
<#@ parameter type="Sage.CA.SBS.ERP.Sage300.CodeGenerationWizard.Settings" name="settings" #>
<#
    // Locals
    var entityName = view.Properties[BusinessView.EntityName];
    var localEntityName = entityName.Substring(0, 1).ToLower() + entityName.Substring(1);
    var moduleId = view.Properties[BusinessView.ModuleId].ToLower();
    var moduleIdUpper = view.Properties[BusinessView.ModuleId];
    var copyright = settings.Copyright;
#>
/* <#=copyright#> */

"use strict";

var <#=localEntityName#>UI = <#=localEntityName#>UI || {}

<#=localEntityName#>UI = {
    <#=localEntityName#>Model: {},
    computedProperties: [],
    init: function () {     
        // Initialize the controls and apply kendo bindings 
        <#=localEntityName#>UI.initKendoBindings();          
        <#=localEntityName#>UI.initFinder();
        <#=localEntityName#>UI.initButtons();
        <#=localEntityName#>UI.initTextBox();
        <#=localEntityName#>UI.initCheckBox();
        <#=localEntityName#>UI.initBlur();
        <#=localEntityName#>UI.initProcessUI();
        ko.applyBindings(<#=localEntityName#>UI.<#=localEntityName#>Model);
    },
    
    initKendoBindings: function () {
        <#=localEntityName#>UI.<#=localEntityName#>Model = ko.mapping.fromJS(<#=entityName#>ViewModel);       
        <#=moduleId#><#=entityName#>KoExtn.<#=moduleId#><#=entityName#>ModelExtension(<#=localEntityName#>UI.<#=localEntityName#>Model);
    },

    initFinder: function() {
    },

    initCheckBox: function () {
    },
    
    initBlur:function() {
    },    

    initTextBox: function ()
    {
    },
    
    initButtons: function () {
        $("#btnProcess").click(function (e) {
            sg.utls.SyncExecute(<#=localEntityName#>UI.process);
        });
    },
    
    process: function () {
        // debugger;
        sg.utls.isProcessRunning = true;
        var processUrl = sg.utls.url.buildUrl("<#=moduleIdUpper#>", "<#=entityName#>", "Process");
        
        var isChecked = false;

        if (!isChecked) {
            // Do not process
            sg.utls.showMessageInfo(sg.utls.msgType.ERROR, <#=localEntityName#>Resources.NoProcessingOption);
            sg.utls.isProcessRunning = false;
        }

        // Check if form is valid
        if ($("#frm<#=entityName#>").valid() && sg.utls.isProcessRunning) {
            // Check Validations
            if (<#=localEntityName#>UI.Validation()) {
                $("#message").empty();
                sg.utls.clearValidations("frm<#=entityName#>");
                sg.utls.isProcessRunning = true;
                var data = { model: ko.mapping.toJS(<#=localEntityName#>UI.<#=localEntityName#>Model, <#=localEntityName#>UI.computedProperties) };
                sg.utls.ajaxPost(processUrl, data, onSuccess.process)
            }
        }
    },
    
    initProcessUI: function() {
        var progressUrl = sg.utls.url.buildUrl("<#=moduleIdUpper#>", "<#=entityName#>", "Progress");
        var cancelUrl = sg.utls.url.buildUrl("<#=moduleIdUpper#>", "<#=entityName#>", "Cancel");
        window.progressUI.init(progressUrl, cancelUrl, <#=localEntityName#>UI.<#=localEntityName#>Model, screenName, onSuccess.onProcessComplete);
    },

    Validation: function () {
        var errorRangeMessage = "";
        var inputValid = true;

        if (!inputValid) {
            if (errorRangeMessage != "") {
                sg.utls.showMessageInfo(sg.utls.msgType.ERROR, jQuery.validator.format(<#=localEntityName#>Resources.ErrorFromToValueMessage, errorRangeMessage));
            } else if (errorMessage != "") {
                sg.utls.showMessageInfo(sg.utls.msgType.ERROR, errorMessage);
            }
        }

        return inputValid;
    }

};

var onSuccess = {
    process: function (jsonResult) {
        if (jsonResult.UserMessage.IsSuccess) {
            var model = <#=localEntityName#>UI.<#=localEntityName#>Model;
            window.ko.mapping.fromJS(jsonResult.WorkflowInstanceId, {}, model.WorkflowInstanceId);
            window.progressUI.progress();
        } else {
            sg.utls.showMessage(jsonResult);
        }
    },
    onProcessComplete: function (result) {
        if (result.ProcessResult.Results.length <= 0) {
            $("#processingResultGrid").hide();
            var errorMessage = <#=localEntityName#>Resources.ProcessingComplete;
            sg.utls.showMessageInfoInCustomDivWithoutClose(sg.utls.msgType.INFO, errorMessage, 'messageDiv');
        }
    },
};

// Finder success method
var onFinderSuccess = {
};

var <#=localEntityName#>Utility = {   
    checkIsDirty: function (yesFuncionToCall, noFunctionToCall) {
        if (<#=localEntityName#>UI.<#=localEntityName#>Model.IsKo<#=entityName#>Dirty && <#=localEntityName#>UI.<#=localEntityName#>Model.IsKo<#=entityName#>Dirty.isDirty()) {
            sg.utls.showKendoConfirmationDialog(
                function () { // Yes
                    yesFuncionToCall.call();
                },
                function () { // No
                    noFunctionToCall.call();
                },
                $.validator.format(globalResource.SaveConfirm));
        } else {
            yesFuncionToCall.call();
        }
    },
};


var <#=localEntityName#>UISuccess = {    
};

// Finder Cancel method
var onFinderCancel = {
};


$(function () {
    <#=localEntityName#>UI.init();
});